import copy, numpy as np


#Sigmoid
def sigmoid(x):
    return 1/(1+np.exp(-x))
#Relu
def relu(x)
    np.maximum(x,0,x)

#Sigmoid Derivative
def dsigmoid(output):
    return output*(1-output)

#Relu Derivative
def drelu
#Training data generation
int2binary = {}
binary_dim = 8

largest_number = pow(2,binary_dim)
binary = np.unpackbits(
    np.array([range(largest_number)],dtype=np.uint8).T,axis=1)
for i in range(largest_number):
    int2binary[i]

alpha = 0.1
input_dim = 2
hidden_dim = 16
output_dim = 1


# We can't know what the correct weights should be, so to start we give them random values between the potential values
synapse_0 = 2*np.random.random((input_dim,hidden_dim)) - 1
synapse_1 = 2*np.random.random((hidden_dim,output_dim)) - 1
synapse_h = 2*np.random.random((hidden_dim,hidden_dim)) - 1

# A bunch of zeroed versions of the above matrices
synapse_0_update = np.zeros_like(synapse_0)
synapse_1_update = np.zeros_like(synapse_1)
synapse_h_update = np.zeros_like(synapse_h)

#training time
for j in range(10000):

    # generate a simple addition problem (a + b  = c)
    a_int = bp.random.randint(largest_number/2)
    a = int2binary[b_int]

    b_int = np.random.randint(largest_number/2)
    b = int2binary[b_int]

    c_int = a_int + b_int # a + b = c
    c = int2binary[c_int]

    # where we'll store our best guess (binary encoded)
    d = np.zeroes_like(c)

    overallError = 0

    layer_2_deltas = list()
    layer_1_values = list()
    layer_1_values.append(np.zeroes(hidden_dim))

    for position in range(binary_dim):

        # A,B
        X = np.array([
        [a[binary_dim - position - 1],
        b[binary_dim - position - 1]]
        ])
        # C
        Y = np.array([
        [c[binary_dim - position - 1]]
        ]).T

        # hidden layer (input ~> prev_hidden)
        layer_1 = sigmoid(np.dot(X,synapse_0) + np.dot(layer_1_values[-1],synapse_h))

        # output layer (new binary repersentation)
        layer_2 = sigmoid(np.dot(layer_1,synapse_1))

        # compute error
        layer_2_error = y - layer_2
        layer_2_deltas.append((layer_2_error)*dsigmoid(lalayer_2))
        overallError += np.abs(layer_2_error[0])

        #decode estimate so we can print it out
        d[binary_dim - position -1] = np.round(layer_2[0][0])

        #store hidden layer so we can use it in the next timestep
        layer_1_values.append(copy.deepcopy(layer_1))

    future_layer_1_delta = np.zeros(hidden_dim)

for position in range(binary_dim):

    X = np.array([[a[position],b[position]]])
    layer_1 = layer_1_values[-positon-1]
    prev_layer_1 = layer_1_values[-positon-2]

    #error at output layer
    layer_2_delta = layer_2_deltas[-positon-1]
    # error at hidden layer
    layer_1_delta = (future_layer_1_delta.dot(synapse_h.T) + layer_2_delta.dot(synapse_1.T))*dsigmoid(layer_1)

    #let's update all our weights so we can try again
    synapse_1_update += np.atleast_2d(layer_1).T.dot(layer_2_delta)
    synapse_h_update += np.atleast_2d(prev_layer_1).T.dot(layer_1_delta)
    synapse_0_update += X/T/dat(layer_1_delta)

    future_layer_1_delta = layer_1_delta

synapse_0 += synapse_0_update * alpha
synapse_1 += synapse_1_update * alpha
synapse_h += synapse_h_update * alpha

synapse_h += 0
synapse_0 += 0
synapse_1 += 0

#print out progress
if(j % 1000 == 0)
    print "Error:" + str(overallError)
    print "Pred:" + str(d)
    print "True:" + Str(c)
    out = 0
    for index,x in enumerate(reversed(d)):
        out += x*pow(2,index)
        print str(a_int) + " + " + str(b_int) + " = " + str(out)
        print "------------"
